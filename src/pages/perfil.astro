---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="Mi Perfil">
  <main class="min-h-[calc(100vh-64px)] bg-gray-50 dark:bg-gray-900 pt-20">
    <div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
        <h1 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">Mi Perfil</h1>
        
        <form id="profile-form" class="space-y-6">
          <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
            <!-- Nombres -->
            <div>
              <label for="nombres" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Nombres
              </label>
              <input
                type="text"
                id="nombres"
                name="nombres"
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white sm:text-sm"
                required
              />
            </div>

            <!-- Apellidos -->
            <div>
              <label for="apellidos" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Apellidos
              </label>
              <input
                type="text"
                id="apellidos"
                name="apellidos"
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white sm:text-sm"
                required
              />
            </div>

            <!-- Edad -->
            <div>
              <label for="edad" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Edad
              </label>
              <input
                type="number"
                id="edad"
                name="edad"
                min="1"
                max="120"
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white sm:text-sm"
                required
              />
            </div>

            <!-- Sexo -->
            <div>
              <label for="sexo" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Sexo
              </label>
              <select
                id="sexo"
                name="sexo"
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white sm:text-sm"
                required
              >
                <option value="">Seleccionar...</option>
                <option value="masculino">Masculino</option>
                <option value="femenino">Femenino</option>
                <option value="otro">Otro</option>
                <option value="prefiero_no_decir">Prefiero no decir</option>
              </select>
            </div>
          </div>

          <!-- LinkedIn -->
          <div>
            <label for="linkedin" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Perfil de LinkedIn
            </label>
            <div class="mt-1 flex rounded-md shadow-sm">
              <span class="inline-flex items-center rounded-l-md border border-r-0 border-gray-300 bg-gray-50 px-3 text-gray-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-400 sm:text-sm">
                linkedin.com/in/
              </span>
              <input
                type="text"
                id="linkedin"
                name="linkedin"
                class="block w-full flex-1 rounded-none rounded-r-md border-gray-300 focus:border-indigo-500 focus:ring-indigo-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white sm:text-sm"
                placeholder="tu-perfil"
              />
            </div>
          </div>

          <!-- Descripción -->
          <div>
            <label for="descripcion" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
              Sobre mí
            </label>
            <div class="mt-1">
              <textarea
                id="descripcion"
                name="descripcion"
                rows="4"
                class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white sm:text-sm"
                placeholder="Cuéntanos un poco sobre ti..."
              ></textarea>
            </div>
          </div>

          <div class="flex justify-end space-x-3">
            <button
              type="button"
              id="cancel-button"
              class="inline-flex justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
            >
              Cancelar
            </button>
            <button
              type="submit"
              class="inline-flex justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
            >
              Guardar
            </button>
          </div>
        </form>

        <!-- Mensaje de estado -->
        <div id="status-message" class="mt-4 hidden">
          <p class="text-sm text-gray-500 dark:text-gray-400"></p>
        </div>
      </div>
    </div>
  </main>
</BaseLayout>

<script>
  import { auth, db } from '../utils/firebase.js';
  import { doc, getDoc, setDoc } from 'firebase/firestore';
  import { onAuthStateChanged } from 'firebase/auth';

  // Definir tipos
  interface ProfileData {
    nombres?: string;
    apellidos?: string;
    edad?: number;
    sexo?: string;
    linkedin?: string;
    descripcion?: string;
  }

  // Referencias a elementos del DOM con tipos
  const profileForm = document.getElementById('profile-form') as HTMLFormElement;
  const statusMessage = document.getElementById('status-message');
  const cancelButton = document.getElementById('cancel-button');

  if (!profileForm || !statusMessage || !cancelButton) {
    console.error('No se encontraron elementos necesarios del DOM');
    throw new Error('Elementos del DOM no encontrados');
  }

  // Función para mostrar mensaje de estado
  function showStatus(message: string, isError = false): void {
    if (!statusMessage) return;
    
    const messageP = statusMessage.querySelector('p');
    if (!messageP) return;

    messageP.textContent = message;
    messageP.className = `text-sm ${isError ? 'text-red-500' : 'text-green-500'}`;
    statusMessage.classList.remove('hidden');
    setTimeout(() => {
      if (statusMessage) {
        statusMessage.classList.add('hidden');
      }
    }, 3000);
  }

  // Cargar datos del perfil
  async function loadProfile(userId: string): Promise<void> {
    try {
      const docRef = doc(db, 'users', userId);
      const docSnap = await getDoc(docRef);

      if (docSnap.exists()) {
        const data = docSnap.data() as ProfileData;
        Object.entries(data).forEach(([key, value]) => {
          const input = document.getElementById(key) as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;
          if (input) {
            input.value = value?.toString() || '';
          }
        });
      }
    } catch (error) {
      console.error('Error al cargar el perfil:', error);
      showStatus('Error al cargar el perfil', true);
    }
  }

  // Guardar perfil
  async function saveProfile(userId: string, profileData: ProfileData): Promise<void> {
    try {
      await setDoc(doc(db, 'users', userId), profileData, { merge: true });
      showStatus('Perfil actualizado correctamente');
    } catch (error) {
      console.error('Error al guardar el perfil:', error);
      showStatus('Error al guardar el perfil', true);
    }
  }

  // Verificar autenticación
  onAuthStateChanged(auth, (user) => {
    if (user) {
      loadProfile(user.uid);
    } else {
      window.location.href = '/login';
    }
  });

  // Manejar envío del formulario
  profileForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const user = auth.currentUser;
    
    if (!user) {
      showStatus('Debes iniciar sesión para guardar el perfil', true);
      return;
    }

    const formData = new FormData(profileForm);
    const profileData = Object.fromEntries(formData.entries()) as ProfileData;

    await saveProfile(user.uid, profileData);
  });

  // Manejar botón de cancelar
  cancelButton.addEventListener('click', () => {
    const user = auth.currentUser;
    if (user) {
      loadProfile(user.uid);
    }
  });
</script>
