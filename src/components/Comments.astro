---
const { projectId } = Astro.props;
---

<div class="comments-section mt-8 border-t border-gray-200 dark:border-gray-700 pt-8">
  <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-6">Comentarios</h3>
  
  <!-- Formulario para nuevo comentario -->
  <div class="new-comment-form mb-8">
    <form id="comment-form" class="space-y-4">
      <div>
        <textarea
          id="comment-text"
          rows="3"
          class="w-full px-3 py-2 text-gray-700 dark:text-gray-300 border rounded-lg focus:outline-none focus:border-indigo-500 dark:border-gray-600 dark:bg-gray-800 dark:focus:border-indigo-500 resize-none"
          placeholder="Escribe tu comentario..."
        ></textarea>
      </div>
      <div class="flex justify-end">
        <button
          type="submit"
          class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition-colors"
        >
          Publicar comentario
        </button>
      </div>
    </form>
  </div>

  <!-- Lista de comentarios -->
  <div id="comments-list" class="space-y-6">
    <div class="text-center text-gray-500 dark:text-gray-400">
      Cargando comentarios...
    </div>
  </div>
</div>

<script define:vars={{ projectId }}>
// Importar las funciones necesarias de Firebase
import { db, auth } from '../utils/firebase.js';
import { 
  collection, 
  addDoc, 
  query, 
  where, 
  orderBy, 
  onSnapshot,
  serverTimestamp 
} from 'firebase/firestore';

// Referencias a elementos del DOM
const commentForm = document.getElementById('comment-form');
const commentText = document.getElementById('comment-text');
const commentsList = document.getElementById('comments-list');

// Función para formatear la fecha
function formatDate(date) {
  return new Intl.DateTimeFormat('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  }).format(date);
}

// Función para crear el elemento HTML de un comentario
function createCommentElement(comment) {
  const div = document.createElement('div');
  div.className = 'comment bg-white dark:bg-gray-800 rounded-lg p-4 shadow-sm';
  div.innerHTML = `
    <div class="flex items-start space-x-3">
      <div class="flex-1">
        <div class="flex items-center justify-between">
          <p class="font-medium text-gray-900 dark:text-white">${comment.authorEmail}</p>
          <span class="text-sm text-gray-500 dark:text-gray-400">
            ${formatDate(comment.createdAt.toDate())}
          </span>
        </div>
        <p class="mt-1 text-gray-600 dark:text-gray-300">${comment.text}</p>
      </div>
    </div>
  `;
  return div;
}

// Función para mostrar mensaje de error
function showError(message) {
  const errorDiv = document.createElement('div');
  errorDiv.className = 'bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mt-4';
  errorDiv.textContent = message;
  commentForm.insertAdjacentElement('afterend', errorDiv);
  setTimeout(() => errorDiv.remove(), 5000);
}

// Escuchar cambios en los comentarios
const commentsQuery = query(
  collection(db, 'comments'),
  where('projectId', '==', projectId),
  orderBy('createdAt', 'desc')
);

onSnapshot(commentsQuery, (snapshot) => {
  commentsList.innerHTML = '';
  
  if (snapshot.empty) {
    commentsList.innerHTML = `
      <div class="text-center text-gray-500 dark:text-gray-400">
        No hay comentarios aún. ¡Sé el primero en comentar!
      </div>
    `;
    return;
  }

  snapshot.forEach((doc) => {
    const comment = { id: doc.id, ...doc.data() };
    const commentElement = createCommentElement(comment);
    commentsList.appendChild(commentElement);
  });
});

// Manejar el envío de nuevos comentarios
commentForm.addEventListener('submit', async (e) => {
  e.preventDefault();

  const user = auth.currentUser;
  if (!user) {
    showError('Debes iniciar sesión para comentar');
    return;
  }

  const text = commentText.value.trim();
  if (!text) {
    showError('El comentario no puede estar vacío');
    return;
  }

  try {
    await addDoc(collection(db, 'comments'), {
      projectId,
      text,
      authorId: user.uid,
      authorEmail: user.email,
      createdAt: serverTimestamp()
    });

    commentText.value = '';
  } catch (error) {
    console.error('Error al publicar comentario:', error);
    showError('Error al publicar el comentario. Por favor, intenta nuevamente.');
  }
});
</script> 